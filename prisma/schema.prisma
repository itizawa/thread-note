datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins","driverAdapters"]
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/types/src/domains"
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  description   String?         @db.VarChar(240)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  threads Thread[]
  posts Post[]
  files File[]
  planSubscription PlanSubscription?
  llmTokenUsages LLMTokenUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LLMTokenUsage {
  id               String   @id @default(cuid())

  userId               String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  promptTokens     Int @map("prompt_tokens")
  completionTokens Int @map("completion_tokens")
  totalTokens      Int @map("total_tokens")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("llm_token_usages")
  @@index([userId, createdAt])
}


model File {
  id         String  @id @default(uuid())

  userId               String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  name String
  path String
  size      Int

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("files")
  @@index([userId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


model Thread {
  id         String  @id @default(uuid())

  userId               String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  title String?
  emojiIcon String? @map("emoji_icon") @db.VarChar(10)
  isPublic Boolean @default(false) @map("is_public")
  isClosed Boolean @default(false) @map("is_closed")

  ogpTitle String? @map("ogp_title")
  ogpDescription String? @map("ogp_description")
  ogpImagePath String? @map("ogp_image_path")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  lastPostedAt DateTime @default(now()) @map("last_post_at") @db.Timestamptz()

  posts Post[]

  @@map("threads")
  @@index([userId])
}


model Post {
  id        String @id @default(uuid())
  /// @zod.string({ required_error: '入力してください' })
  body      String

  userId               String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  threadId String @map("thread_id")
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  parentId  String? @map("parent_id")
  parent Post? @relation("PostOneToManyRelation",fields: [parentId], references: [id], onDelete: Cascade)

  children Post[] @relation("PostOneToManyRelation")

  isArchived Boolean @default(false)

  @@map("posts")
}

model Plan {
  id         String  @id @default(uuid())

  name String

  planSubscriptions PlanSubscription[]

  @@map("plans")
}


model PlanSubscription {
  id         String  @id @default(uuid())

  userId               String @unique @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId               String @map("plan_id")
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("plan_subscriptions")
}
